digraph G {
    fontname = "Bitstream Vera Sans"
    fontsize = 8

    node [
        fontname = "Bitstream Vera Sans"
        fontsize = 10
        shape = none width=0 height=0 margin=0
    ]

    edge [
        fontname = "Bitstream Vera Sans"
        fontsize = 10
    ]

    subgraph clustercontroller{

        request_startgame [
            label =
            <<table border="0" cellspacing="0" cellborder="1">
                <tr>
                    <td>Request_StartGame</td>
                </tr>
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="left"></td></tr>
                        </table>
                    </td>
                </tr>
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="left">+ Request_StartGame(HttpServletRequest req)</td></tr>
                            <tr><td align="left">+ doWork(): JSONObject</td></tr>
                        </table>
                    </td>
                </tr>
            </table>>
        ]

        request_checkfields [
            label =
            <<table border="0" cellspacing="0" cellborder="1">
                <tr>
                    <td>Request_CheckFields</td>
                </tr>
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="left"></td></tr>
                        </table>
                    </td>
                </tr>
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="left">+ Request_CheckFields(HttpServletRequest req)</td></tr>
                            <tr><td align="left">+ doWork(): JSONObject</td></tr>
                        </table>
                    </td>
                </tr>
            </table>>
        ]

        request_bridge [
            label =
            <<table border="0" cellspacing="0" cellborder="1">
                <tr>
                    <td>Request_Bridge</td>
                </tr>
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="left"><u>- AJAX_START_GAME: String</u></td></tr>
                            <tr><td align="left"><u>- AJAX_CHECK_FIELDS: String</u></td></tr>
                        </table>
                    </td>
                </tr>
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="left"># Request_Bridge()</td></tr>
                            <tr><td align="left"># handleRequest(HttpServletRequest req): JSONObject</td></tr>
                        </table>
                    </td>
                </tr>
            </table>>
        ]

        abstracthandler [
            label =
            <<table border="0" cellspacing="0" cellborder="1">
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="center"><i>&lt;&lt;Abstract&gt;&gt;</i></td></tr>
                            <tr><td align="center"><i>AbstractHandler</i></td></tr>
                        </table>
                    </td>
                </tr>
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="left">- req: HttpServletRequest</td></tr>
                        </table>
                    </td>
                </tr>
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="left">+ doWork(): JSONObject</td></tr>
                            <tr><td align="left">+ getParameter(String sParameter, Class&lt;T&gt; type): &lt;T&gt;</td></tr>
                        </table>
                    </td>
                </tr>
            </table>>
        ]

        sudoku3D_servlet [
            label =
            <<table border="0" cellspacing="0" cellborder="1">
                <tr>
                    <td>Sudoku3D_Servlet</td>
                </tr>
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="left"></td></tr>
                        </table>
                    </td>
                </tr>
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="left"># doGet(HttpServletRequest req, HttpServletResponse resp): void</td></tr>
                        </table>
                    </td>
                </tr>
            </table>>
        ]

        httpservlet [
            label =
            <<table border="0" cellspacing="0" cellborder="1">
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="center"><i>&lt;&lt;Abstract&gt;&gt;</i></td></tr>
                            <tr><td align="center"><i>HttpServlet</i></td></tr>
                        </table>
                    </td>
                </tr>
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="left"></td></tr>
                        </table>
                    </td>
                </tr>
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="left">+ HttpServlet()</td></tr>
                            <tr><td align="left"># doDelete(HttpServletRequest req, HttpServletResponse resp): void</td></tr>
                            <tr><td align="left"># doGet(HttpServletRequest req, HttpServletResponse resp): void</td></tr>
                            <tr><td align="left"># doHead(HttpServletRequest req, HttpServletResponse resp): void</td></tr>
                            <tr><td align="left"># doOptions(HttpServletRequest req, HttpServletResponse resp): void</td></tr>
                            <tr><td align="left"># doPost(HttpServletRequest req, HttpServletResponse resp): void</td></tr>
                            <tr><td align="left"># doPut(HttpServletRequest req, HttpServletResponse resp): void</td></tr>
                            <tr><td align="left"># doTrace(HttpServletRequest req, HttpServletResponse resp): void</td></tr>
                            <tr><td align="left"># getLastModified(HttpServletRequest req): long</td></tr>
                            <tr><td align="left"># service(HttpServletRequest req, HttpServletResponse resp): long</td></tr>
                            <tr><td align="left"># service(ServletRequest req, ServletResponse resp): long</td></tr>
                        </table>
                    </td>
                </tr>
            </table>>
        ]
    }

    subgraph clustermodel{

        label = "package: model"

        sudoku3d [
            label =
            <<table border="0" cellspacing="0" cellborder="1">
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="center"><i>&lt;&lt;interface&gt;&gt;</i></td></tr>
                            <tr><td align="center"><i>Sudoku3D</i></td></tr>
                        </table>
                    </td>
                </tr>
                <tr>
                    <td></td>
                </tr>
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="left">+ insert(int x, int y, int z, int n): boolean</td></tr>
                            <tr><td align="left">+ isSolved(): boolean</td></tr>
                            <tr><td align="left">+ getWrongEntries(): int[][]</td></tr>
                            <tr><td align="left">+ getFieldValues(): int[][][]</td></tr>
                            <tr><td align="left">+ clear(): void</td></tr>
                        </table>
                    </td>
                </tr>
            </table>>
        ]

        sudoku3dfactory [
            label =
            <<table border="0" cellspacing="0" cellborder="1">
                <tr>
                    <td>Sudoku3DFactory</td>
                </tr>
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="left">- length: int</td></tr>
                            <tr><td align="left">- solutions: int</td></tr>
                            <tr><td align="left">- wantedRules: RuleModule[]</td></tr>
                            <tr><td align="left">- sudoku3D: Sudoku3DModel</td></tr>
                        </table>
                    </td>
                </tr>
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="left"><u>+ createSudoku3D(int length, RuleModule[] wantedRules): Sudoku3D</u></td></tr>
                            <tr><td align="left">- Sudoku3DFactory(int length, RuleModule[] wantedRules)</td></tr>
                            <tr><td align="left">- getPossibleSolution(): boolean</td></tr>
                            <tr><td align="left">- hasMoreSolutions(): boolean</td></tr>
                            <tr><td align="left">- solveSudoku3D(): boolean</td></tr>
                            <tr><td align="left">- solveSudoku3D(int x, int y, int z): boolean</td></tr>
                            <tr><td align="left">- getSudoku3D(): Sudoku3D</td></tr>
                            <tr><td align="left">- init(): void</td></tr>
                            <tr><td align="left">- insertSomeNumbers(): void</td></tr>
                            <tr><td align="left">- removeNumbers(): void</td></tr>
                        </table>
                    </td>
                </tr>
            </table>>
        ]
    }

    sudoku3dfactory -> sudoku3d [arrowhead=none]
    request_startgame -> abstracthandler [arrowhead=onormal]
    request_startgame -> sudoku3dfactory [arrowhead=none]
    request_checkfields -> abstracthandler [arrowhead=onormal]
    request_checkfields -> sudoku3dfactory [arrowhead=none]
    request_startgame -> request_bridge [arrowhead=diamond]
    request_checkfields -> request_bridge [arrowhead=diamond]
    request_bridge -> sudoku3D_servlet [arrowhead=diamond]
    sudoku3D_servlet -> httpservlet [arrowhead=onormal]
}
