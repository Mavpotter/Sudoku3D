digraph G {
    graph [splines=ortho]
    fontname = "Bitstream Vera Sans"
    fontsize = 8

    node [
        fontname = "Bitstream Vera Sans"
        fontsize = 10
        shape = none width=0 height=0 margin=0
    ]

    edge [
        fontname = "Bitstream Vera Sans"
        fontsize = 10
    ]

    subgraph clustermodel{

        label = "package: model"

        sudoku3d [
            label =
            <<table border="0" cellspacing="0" cellborder="1">
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="center"><i>&lt;&lt;interface&gt;&gt;</i></td></tr>
                            <tr><td align="center"><i>Sudoku3D</i></td></tr>
                        </table>
                    </td>
                </tr>
                <tr>
                    <td></td>
                </tr>
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="left">+ insert(int x, int y, int z, int n): boolean</td></tr>
                            <tr><td align="left">+ isSolved(): boolean</td></tr>
                            <tr><td align="left">+ getWrongEntries(): int[][]</td></tr>
                            <tr><td align="left">+ getFieldValues(): int[][][]</td></tr>
                            <tr><td align="left">+ clear(): void</td></tr>
                        </table>
                    </td>
                </tr>
            </table>>
        ]

        sudoku3dfactory [
            label =
            <<table border="0" cellspacing="0" cellborder="1">
                <tr>
                    <td>Sudoku3DFactory</td>
                </tr>
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="left">- length: int</td></tr>
                            <tr><td align="left">- solutions: int</td></tr>
                            <tr><td align="left">- sudoku3D: Sudoku3DModel</td></tr>
                        </table>
                    </td>
                </tr>
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="left"><u>+ createSudoku3D(int length): Sudoku3D</u></td></tr>
                            <tr><td align="left">- Sudoku3DFactory(int length)</td></tr>
                            <tr><td align="left">- getPossibleSolution(): boolean</td></tr>
                            <tr><td align="left">- hasMoreSolutions(): boolean</td></tr>
                            <tr><td align="left">- solveSudoku3D(): boolean</td></tr>
                            <tr><td align="left">- solveSudoku3D(int x, int y, int z, boolean removeCalculations): boolean</td></tr>
                            <tr><td align="left">- getSudoku3D(): Sudoku3D</td></tr>
                            <tr><td align="left">- init(): void</td></tr>
                            <tr><td align="left">- permutateNumbers(): void</td></tr>
                            <tr><td align="left">- setCurrentStateAsSolution(): void</td></tr>
                            <tr><td align="left">- extractNumbers(): void</td></tr>
                            <tr><td align="left">- removePairs(int pairsToRemove): boolean</td></tr>
                        </table>
                    </td>
                </tr>
            </table>>
        ]

        sudoku3dmodel [
            label =
            <<table border="0" cellspacing="0" cellborder="1">
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="center">Sudoku3DModel</td></tr>
                        </table>
                    </td>
                </tr>
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="left"># isPermanent: boolean[][][]</td></tr>
                            <tr><td align="left"># sudoku3D: int[][][]</td></tr>
                            <tr><td align="left"># solution: int[][][]</td></tr>
                            <tr><td align="left"># length: int</td></tr>
                            <tr><td align="left"># n: int</td></tr>
                        </table>
                    </td>
                </tr>
                <tr>
                    <td>
                        <table border="0" cellspacing="0" cellborder="0">
                            <tr><td align="left"># Sudoku3DModel(int length)</td></tr>
                            <tr><td align="left">+ insert(int x, int y, int z, int n): boolean</td></tr>
                            <tr><td align="left">+ isSolved(): boolean</td></tr>
                            <tr><td align="left">+ getWrongEntries(): int[][]</td></tr>
                            <tr><td align="left">+ getFieldValues(): int[][][]</td></tr>
                            <tr><td align="left">+ clear(): void</td></tr>
                            <tr><td align="left">- isLegal(int x, int y, int z): boolean</td></tr>
                            <tr><td align="left">- areRowsAndColumnsOk(int x, int y, int z): boolean</td></tr>
                            <tr><td align="left">- areBoxesOk(int x, int y, int z): boolean</td></tr>
                        </table>
                    </td>
                </tr>
            </table>>
        ]
    }

    sudoku3dfactory -> sudoku3dmodel
    sudoku3dfactory -> sudoku3d [arrowhead=none]
    sudoku3dmodel -> sudoku3d [arrowhead=onormal,style=dashed]
}
